services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres-container
    networks:
      - database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password123
      - POSTGRES_USER=estates_scraper
      - POSTGRES_DB=estates
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./data_dump.sql:/docker-entrypoint-initdb.d/data_dump.sql
  ml:
    image: estates/machine-learning
    container_name: machine-learning
    command: bash -c "python3 model-training.py && bentoml serve service:tree -p 3000"
    ports:
      - "3000:3000"
    networks:
      - database
    environment:
      - API_HOST=api
      - API_PORT=8000
      - ML_API_KEY=ml_api_key
    build:
      context: machine-learning
      dockerfile: Dockerfile
    healthcheck:
      test: curl --fail http://localhost:3000/healthz || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
    depends_on:
      api:
        condition: service_healthy
  api:
    image: estates/api
    container_name: api
    command: fastapi run app.py --port=8000
    platform: linux/amd64
    ports:
      - "8000:8000"
    networks:
      - database
    environment:
      - PGPASSWORD=password123
      - PGUSER=estates_scraper
      - PGDATABASE=estates
      - PGHOST=postgres-container
    build:
      context: api
      dockerfile: Dockerfile
    healthcheck:
      test: curl --fail http://localhost:8000/health || exit 1
      interval: 5s
      timeout: 10s
    depends_on:
      postgres:
        condition: service_healthy
  ui:
    image: estates/user-interface
    container_name: user-interface
    command: bash -c "streamlit run app.py --server.port=8501"
    platform: linux/amd64
    ports:
      - "8501:8501"
    networks:
      - database
    environment:
      - API_HOST=api
      - API_PORT=8000
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      - BENTOML_HOST=machine-learning
      - BENTOML_PORT=3000
      - UI_API_KEY=ui_api_key
    build:
      context: user-interface
      dockerfile: Dockerfile
    depends_on:
      ml:
        condition: service_healthy
      api:
        condition: service_healthy

networks:
  database:
    name: database-network
